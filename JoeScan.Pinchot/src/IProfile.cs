// Copyright(c) JoeScan Inc. All Rights Reserved.
//
// Licensed under the BSD 3 Clause License. See LICENSE.txt in the project
// root for license information.

using System;
using System.Collections.Generic;

namespace JoeScan.Pinchot
{
    /// <summary>
    /// Profile data from a scan head.
    /// </summary>
    public interface IProfile
    {
        /// <summary>
        /// Gets the <see cref="ScanHead.ID"/> of the <see cref="ScanHead"/> the profile originates from.
        /// </summary>
        /// <value>The <see cref="ScanHead.ID"/> of the <see cref="ScanHead"/> the profile originates from.</value>
        uint ScanHeadID { get; }

        /// <summary>
        /// Gets the <see cref="Pinchot.Camera"/> the profile originates from.
        /// </summary>
        /// <value>The <see cref="Pinchot.Camera"/> the profile originates from.</value>
        Camera Camera { get; }

        /// <summary>
        /// Gets the <see cref="Pinchot.Laser"/> used to generate the profile.
        /// </summary>
        /// <value>The <see cref="Pinchot.Laser"/> used to generate the profile.</value>
        Laser Laser { get; }

        /// <summary>
        /// Gets the time of the scan head in nanoseconds when the profile was generated.
        /// </summary>
        /// <value>The time of the scan head in nanoseconds when the profile was generated.</value>
        ulong TimestampNs { get; }

        /// <summary>
        /// Gets the <see cref="Encoder"/> positions when the profile was generated.
        /// </summary>
        /// <value>A <see cref="IDictionary{TKey,TValue}"/> of encoder positions when the profile was generated.</value>
        IDictionary<Encoder, long> EncoderValues { get; }

        /// <summary>
        /// Gets the laser on time in microseconds used to generate the profile.
        /// </summary>
        /// <value>The laser on time in microseconds used to generate the profile.</value>
        ushort LaserOnTimeUs { get; }

        /// <summary>
        /// Gets the <see cref="Point2D"/> data for the profile, including invalid points.
        /// </summary>
        /// <value>A <see cref="Span{T}"/> of <see cref="Point2D"/> data for the profile.</value>
        /// <seealso cref="GetValidXYPoints()"/>
        /// <seealso cref="GetValidXYPoints(Span{Point2D})"/>
        Span<Point2D> RawPoints { get; }

        /// <summary>
        /// Gets the number of valid <see cref="Point2D"/>s in the profile.
        /// </summary>
        /// <value>The number of valid <see cref="Point2D"/>s in the profile.</value>
        uint ValidPointCount { get; }

        /// <summary>
        /// Gets the <see cref="DataFormat"/> of the profile.
        /// </summary>
        /// <value>The <see cref="DataFormat"/> of the profile.</value>
        DataFormat DataFormat { get; }

        /// <summary>
        /// Gets the total number of packets expected to comprise the profile.
        /// </summary>
        /// <value>The total number of packets expected.</value>
        uint PacketsExpected { get; }

        /// <summary>
        /// Gets the number of packets received for the profile. If less than <see cref="PacketsExpected"/>,
        /// then the profile data is incomplete. Generally, this implies some type of network issue.
        /// </summary>
        /// <value>The number of packets received.</value>
        uint PacketsReceived { get; }

        /// <summary>
        /// Gets the monotonically increasing count of profiles generated by the camera associated with this profile.
        /// </summary>
        /// <value>The count of profiles generated by the camera associated with this profile.</value>
        uint SequenceNumber { get; }

        /// <summary>
        /// Gets the various conditions that can occur at the moment the profile was captured.
        /// </summary>
        /// <value>The <see cref="ProfileFlags"/> associated with this profile.</value>
        ProfileFlags Flags { get; }

        /// <summary>
        /// Gets the valid <see cref="Point2D"/>s in the profile.
        /// </summary>
        /// <returns>A <see cref="IEnumerable{Point2D}"/> of the valid <see cref="Point2D"/>s in the profile.</returns>
        /// <seealso cref="GetValidXYPoints(Span{Point2D})"/>
        IEnumerable<Point2D> GetValidXYPoints();

        /// <summary>
        /// Gets the valid <see cref="Point2D"/>s in the profile.
        /// </summary>
        /// <param name="validPoints">
        /// A <see cref="Span{T}"/> of <see cref="Point2D"/> that is the
        /// storage location for the valid <see cref="Point2D"/>s. Must be of length greater than
        /// or equal to <see cref="ValidPointCount"/>.
        /// </param>
        /// <seealso cref="GetValidXYPoints()"/>
        void GetValidXYPoints(Span<Point2D> validPoints);
    }
}
